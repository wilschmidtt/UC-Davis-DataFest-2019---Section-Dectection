DATAFEST URL: http://ds.lib.ucdavis.edu/eventscalendar/datafest-wine-catalog-challenge/

THE CHALLENGE: The UC Davis Library has over 200 scanned catalogs spanning nearly a 50 year period. How do we translate a scanned image
into usable data for economists, historians, archivists, and other researchers?

HYPOTHESIZED SOLUTION: Unstructured text recognition using Python and Spyder. Utilize Pandas, NumPy, Matplotlib, and sklearn. Clustering 
by feature location was done with K-Means machine learning algorithm.


HOW PROGRAM WORKS:

  -First step: Connect to server that allows user to access information about all the wine catalogues. In this program I foucsed on a 
   specific catalouge which had the ID: 'd7q36x-009'. Any ID can be used with this progran.
  -Next step: Created a dataframe titled 'words' that contains the coordinates of each bounding box (there is a bounding box around 
   every word on the catalouge). NOTE: The pyperclip module is used so that the URL for the catalouge in question is automatically 
   coppied to the user's clipboard. Paste in browser to see what catalouge looks like.
  -Next step: Use the location of bounding boxes to plot all words on a scatter plot. NOTE: The positive y-axis extends in the downward
   direction.
  -Next step: An OCR was used to predict the word within each bounding box. To avoid error, only words that the OCR predicted with 
   > 80% confidence were plotted.
  -Next step: Start iteration 1 - Use elbow method to determine optimal number of clusters to split data into. Automate the process of
   selecting the optimal number of clusters by returning the change in slope at each interval within the elbow graph, finding the max 
   change in slope, then using the index of max change as the optimal number of clusters. Apply K-means to this dataset using the 
   optimal number of clusters then plot the new clusters, creating a separate plot and dataframe for each.
  -Next Step: Start iteration 2 - do the above steps on each of the new clusters, thus breaking them into their respective ideal number
   of sub clusters. Create a new dataframe for each of the new sub clusters, and save an image of what each plot looks like into 
   the same directory the main module is located within. 
  -Next Step: Optional Iteration - This section will remain commented out unless user desires to use it. This section should be executed
   only if you look at each of the new clusters and decide that one should be divided into further sub clusters. When executing this 
   section, the user will be promted to enter the name of the cluster in question. All the cluster names are located within the title of 
   their respective scatter plots. Once cluster name is entered, this cluster will be broken up into its optimal number of sub clusters,
   and each new cluster will be plotted and saved in the same directory as the main module. This section can be executed as many times 
   as desired, on as many clusters as desired. NOTE: This section is intentionally left up to the user's disgression because if it was 
   executed automatically, certain clusters could be subject to overfitting which would erase valuable structural information about 
   the catalouge in question.
   
END OF PROGRAM
   
